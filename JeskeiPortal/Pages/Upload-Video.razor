@page "/upload-video"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Collections.Specialized
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Newtonsoft.Json
@using System.Text
@using System.Net.Http.Headers
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Telerik.Blazor.Components.Upload
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@using Microsoft.Extensions.DependencyInjection;
@using System;
@using System.Net.Http;
@using System.Threading.Tasks;

@if (string.IsNullOrEmpty(SuccessMessage))
{
    <EditForm EditContext="@MyEditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />

        @if (NotValid)
        {
            <div class="demo-alert demo-alert-error">
                <ValidationSummary />
            </div>
        }

        <div class="row">
            <div class="col-lg-12">
                <div class="main-title">
                    <h6>Upload Details</h6>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="imgplace"></div>
            </div>
            <div class="col-lg-10">
                <div class="osahan-title">Contrary to popular belief, Lorem Ipsum (2020) is not.</div>
                <div class="osahan-size">102.6 MB . 2:13 MIN Remaining</div>
                <div class="osahan-progress">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
                    </div>
                    <div class="osahan-close">
                        <a href="#"><i class="fas fa-times-circle"></i></a>
                    </div>
                </div>
                <div class="osahan-desc">Your Video is still uploading, please keep this page open until it's done.</div>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-lg-12">
                <div class="osahan-form">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label for="e1">Video Title</label>
                                <InputText placeholder="Romance in New York" class="form-control" @bind-Value="@currentForm.Title" />
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label for="e2">About</label>
                                <InputTextArea rows="3" placeholder="Description" class="form-control" @bind-Value="@currentForm.About"></InputTextArea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="e3">Access</label>

                                <select class="custom-select" @bind="@SelectedAccessID">
                                    @foreach (var access in AccessList)
                                    {
                                        <option value="@access.Code"> @access.Name </option>
                                    }
                                </select>

                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="e9">Language</label>
                                <select class="custom-select" @bind="@SelectedLanguageID">
                                    @foreach (var language in LanguageList)
                                    {
                                        <option value="@language.Code"> @language.Name </option>
                                    }
                                </select>


                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="e5">Monetize</label>
                                <select class="custom-select" @bind="@SelectedLanguageID">
                                    @foreach (var monetize in MonetizeList)
                                    {
                                        <option value="@monetize.Code"> @monetize.Name </option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="e6">License</label>

                                <select class="custom-select" @bind="@SelectedLicenseID">
                                    @foreach (var license in LicenseList)
                                    {
                                        <option value="@license.Code"> @license.Name </option>
                                    }
                                </select>

                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="e7">Tags (13 Tags Remaining)</label>
                                <InputText placeholder="Gaming, PS4" class="form-control" @bind-Value="@currentForm.Tags" />
                            </div>
                        </div>
                        <div class="col-lg-5">
                            <div class="form-group">
                                <label for="e8">Cast (Optional)</label>
                                <InputText placeholder="Nathan Drake," class="form-control" @bind-Value="@currentForm.Cast" />
                            </div>
                        </div>

                    </div>
                    <div class="row ">
                        <div class="col-lg-12">
                            <div class="main-title">
                                <h6>Fee recipients ( you can specify up to 6 recipients for fees )</h6>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- checkbox 1col -->
                        <div class="col-lg-2 col-xs-6 col-4">
                            <div class="custom-control">
                                <input type="text" placeholder="0x wallet address" id="e1" class="form-control">
                                <label for="e1">Recipient 1: </label>
                            </div>
                            <div class="custom-control">
                                <input type="text" placeholder="0x wallet address" id="e2" class="form-control">
                                <label for="e2">Recipient 2:</label>
                            </div>
                            <div class="custom-control">
                                <input type="text" placeholder="0x wallet address" id="e3" class="form-control">
                                <label for="e3">Recipient 3:</label>
                            </div>
                            <div class="custom-control">
                                <input type="text" placeholder="0x wallet address" id="e4" class="form-control">
                                <label for="e4">Recipient 4:</label>
                            </div>
                            <div class="custom-control ">
                                <input type="text" placeholder="0x wallet address" id="e5" class="form-control">
                                <label for="e5">Recipient 5:</label>
                            </div>
                        </div>
                        <!-- checkbox 2col -->
                        <div class="col-lg-2 col-xs-6 col-4">
                            <div class="custom-control">
                                <input type="text" placeholder="weight" id="e1" class="form-control">
                                <label style="padding-top:14px;" for="e1"> </label>
                            </div>
                            <div class="custom-control">
                                <input type="text" placeholder="weight" id="e1" class="form-control">
                                <label style="padding-top:14px;" for="e1"> </label>
                            </div>
                            <div class="custom-control">
                                <input type="text" placeholder="weight" id="e1" class="form-control">
                                <label style="padding-top:14px;" for="e1"> </label>
                            </div>
                            <div class="custom-control">
                                <input type="text" placeholder="weight" id="e1" class="form-control">
                                <label style="padding-top:14px;" for="e1"> </label>
                            </div>
                            <div class="custom-controlx">
                                <input type="text" placeholder="weight" id="e1" class="form-control">
                                <label style="padding-top:14px;" for="e1"> </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="osahan-area text-center mt-3">
                    <button class="btn btn-outline-primary">Upload Video</button>
                </div>
                <hr>
                <div class="terms text-center">
                    <p class="mb-0">There are many variations of passages of Lorem Ipsum available, but the majority <a href="#">Terms of Service</a> and <a href="#">Community Guidelines</a>.</p>
                    <p class="hidden-xs mb-0">Ipsum is therefore always free from repetition, injected humour, or non</p>
                </div>
            </div>
        </div>

        <div class="k-form-field">
            <label class="k-label k-form-label">Video file:</label>
            <div class="k-form-field-wrap">
                <TelerikFileSelect
                    AllowedExtensions="@AllowedExtensions"
                    OnSelect="@OnSelectHandler">
                </TelerikFileSelect>
                <div class="k-form-hint">Accepted files: <strong>MPG and AVI</strong></div>
            </div>
        </div>
    </EditForm>
}
else
{
    <div class="demo-alert demo-alert-success" role="alert">
        @SuccessMessage
        <br />
        <TelerikButton ThemeColor="@(ThemeConstants.Button.ThemeColor.Dark)" OnClick="@BackToForm">Go back</TelerikButton>
    </div>
}

@code {
    // setup upload endpoints
    public string SaveUrl => ToAbsoluteUrl("api/upload/save");
    public string RemoveUrl => ToAbsoluteUrl("api/upload/remove");
    List<string> AllowedExtensions { get; set; } = new List<string>() { ".mpg", ".avi" };
    TelerikUpload? UploadRef { get; set; }

    /// <summary>
    /// Data to pass as an input to the function
    /// </summary>
    private class RequestBodyModel
    {
        /// <summary>
        /// Wallet address of wallet uploading asset
        /// Mandatory.
        /// </summary>
        [JsonProperty("assetOwnerAddress")]
        public string AssetOwnerAddress { get; set; } = "0x0000000000000000000000000000000000000000";

        /// <summary>
        /// Signature of wallet owner to prove ownership of asset being loaded
        /// Mandatory.
        /// </summary>
        [JsonProperty("assetOwnerSignature")]
        public string? AssetOwnerSignature { get; set; }

        /// <summary>
        /// Asset name
        /// </summary>
        [JsonProperty("assetName")]
        public string AssetName { get; set; } = "DefualtName";

        /// <summary>
        /// Asset description
        /// Optional.
        /// </summary>
        [JsonProperty("assetDescription")]
        public string? AssetDescription { get; set; }
    }

    /// <summary>
    /// Data output by the function
    /// </summary>
    private class AnswerBodyModel
    {
        /// <summary>
        /// Name of the asset created.
        /// </summary>
        [JsonProperty("assetName")]
        public string? AssetName { get; set; }

        /// <summary>
        /// Id of the asset.
        /// </summary>
        [JsonProperty("assetId")]
        public Guid AssetId { get; set; }

        /// <summary>
        /// Name of the storage container.
        /// </summary>
        [JsonProperty("container")]
        public string? Container { get; set; }

        /// <summary>
        /// Uri for uploading blob
        /// </summary>
        [JsonProperty("sasUri")]
        public Uri? SasUri { get; set; }
    }

    public string ToAbsoluteUrl(string url)
    {
        return $"{NavigationManager.BaseUri}{url}";
    }

    // setup validation, this is a workaround because file validation does not exist in the framework
    // see more here https://github.com/dotnet/aspnetcore/issues/18821
    VideoAssetForm currentForm { get; set; } = new VideoAssetForm();
    protected EditContext? MyEditContext { get; set; }

    string SelectedLicenseID
    {
        get => currentForm.SelectedLicenseID;
        set { currentForm.SelectedLicenseID = value; }
    }

    List<License> LicenseList = new List<License>() { new License ("STD", "Standard Jeskei License"),
                                                      new License ("CC", "Creative Commons - Attribution"),
                                                      new License ("SA", "ShareAlike - Attribution"),
                                                      new License ("ND", "No Derivatives - Attribution"),
                                                      new License ("PD", "Public Domain"),
                                                      new License ("RF", "Royalty Free"),
                                                      new License ("C", "Copyrighted")};

    public class License
    {
        public License(string code, string name)
        {
            Code = code;
            Name = name;
        }
        public string Code { get; set; }
        public string Name { get; set; }
    }

    string SelectedAccessID
    {
        get => currentForm.SelectedAccessID;
        set { currentForm.SelectedAccessID = value; }
    }

    List<Access> AccessList = new List<Access>() { new Access ("Public", "Public"),
                                                   new Access ("Private", "Private"),
                                                   new Access ("Channel Subscribers", "Channel Subscribers")};

    public class Access
    {
        public Access(string code, string name)
        {
            Code = code;
            Name = name;
        }
        public string Code { get; set; }
        public string Name { get; set; }
    }


    string SelectedLanguageID
    {
        get => currentForm.SelectedLanguageID;
        set { currentForm.SelectedLanguageID = value; }
    }

    List<Language> LanguageList = new List<Language>() { new Language ("English", "English"),
                                                         new Language ("French", "French"),
                                                         new Language ("German", "German"),
                                                         new Language ("Italian", "Italian"),
                                                         new Language ("Spanish", "Spanish")};

    public class Language
    {
        public Language(string code, string name)
        {
            Code = code;
            Name = name;
        }
        public string Code { get; set; }
        public string Name { get; set; }
    }

    string SelectedMonetizeID
    {
        get => currentForm.SelectedMonetizeID;
        set { currentForm.SelectedMonetizeID = value; }
    }

    List<Monetize> MonetizeList = new List<Monetize>() { new Monetize ("No", "No"),
                                                         new Monetize ("Pay to View", "Pay to View"),
                                                         new Monetize ("Advertise", "Advertise"),
                                                         new Monetize ("Pay to View &Aacute; Advertise", "Pay to View &Aacute; Advertise")};

    public class Monetize
    {
        public Monetize(string code, string name)
        {
            Code = code;
            Name = name;
        }
        public string Code { get; set; }
        public string Name { get; set; }
    }

    private bool NotValid => MyEditContext != null ? MyEditContext.GetValidationMessages().Any() : true;
    Dictionary<string, bool> FilesValidationInfo { get; set; } = new Dictionary<string, bool>();

    protected override void OnInitialized()
    {
        MyEditContext = new EditContext(currentForm);
    }

    async Task OnSelectHandler(FileSelectEventArgs args)
    {
        currentForm.VideoSelected = args;
    }

    // sample model
    public class VideoAssetForm
    {
        [Required(ErrorMessage = "Enter a video title")]
        public string? Title { get; set; }

        [Required(ErrorMessage = "Enter a description")]
        public string? About { get; set; }

        public int Currency { get; set; }

        public int Access { get; set; }

        public int Monetise { get; set; }

        public int License { get; set; }

        [Required(ErrorMessage = "Enter at least one tag")]
        public string? Tags { get; set; }

        public string? Cast { get; set; }

        public int Language { get; set; }

        public string SelectedAccessID { get; set; } = "Public";

        public string SelectedLicenseID { get; set; } = "STD";

        public string SelectedLanguageID { get; set; } = "English";

        public string SelectedMonetizeID { get; set; } = "No";

        public FileSelectEventArgs? VideoSelected { get; set; }
    }

    void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }

    // UI for the demo to showcase changes to the form validation and success
    string SuccessMessage = string.Empty;

    async void HandleValidSubmit()
    {
        var content = new RequestBodyModel();
        content.AssetDescription = currentForm.About;
        content.AssetOwnerAddress = MetamaskHostProvider.Current.SelectedAccount;
        content.AssetOwnerSignature = "TestSignature";
        content.AssetName = currentForm.VideoSelected != null ? currentForm.VideoSelected.Files.First().Name : "DefaultName";

        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.PostAsJsonAsync("https://jeskeimediafunctions20220705210441.azurewebsites.net/api/CreateEmptyAsset", content))
            {
                response.EnsureSuccessStatusCode();

                var responseBody = await response.Content.ReadAsStringAsync();
                var answerBody = JsonConvert.DeserializeObject<AnswerBodyModel>(responseBody);

                if (currentForm.VideoSelected != null)
                {
                    foreach (var file in currentForm.VideoSelected.Files)
                    {
                        try
                        {
                            BlobContainerClient container = new BlobContainerClient(answerBody.SasUri);
                            BlobClient blob = container.GetBlobClient(answerBody.AssetName);

                            await blob.UploadAsync(file.Stream);

                            /*
                            var metadata = new Dictionary<string, string> { { "UploadedBy", "Mark" }};
                            var tags = new Dictionary<string, string> { { "HomePage", "markheath.net" }};

                            var options = new BlobUploadOptions() {
                                Metadata = metadata,
                                Tags = tags,
                                HttpHeaders = new BlobHttpHeaders() { ContentType = "video/mp4" }
                            };
                            */
                        }
                        catch (Exception)
                        {
                        }
                    }
                }
            }
        }

        SuccessMessage = "Video uploaded!";
    }


    async Task BackToForm()
    {
        await JsInterop.InvokeVoidAsync("window.location.reload");
    }
}

<style>
    .box {
        margin: 4.5em 7.5em;
        padding: 3em;
        background-color: rgba(20,53,80,0.038);
        border: 1px solid rgba(20,53,80,0.05);
    }

    .demo-section {
        margin: 0 auto;
        padding: 3em;
        border: 1px solid rgba(20,53,80,0.14);
        box-shadow: 0 1px 2px 1px rgba(0,0,0,.08), 0 3px 6px rgba(0,0,0,.08);
    }

    .auto {
        max-width: max-content;
    }

    .demo-section:not(.wide):not(.auto),
    .box:not(.wide):not(.auto) {
        max-width: 500px;
    }

    .box:after,
    .demo-section:after {
        content: "; display: block; clear: both";
        height: 0;
    }

    .box {
        margin: 4.5em auto;
    }

        .box:first-child {
            margin-top: 0;
        }

    .center {
        text-align: center;
    }

    .demo-section.editor {
        max-width: 100%;
        border: none;
    }

    .demo-alert {
        font: normal 18px "Metric";
        border-radius: 2px;
        margin: 20px auto 40px auto;
        padding: 20px;
        border-left: 4px solid;
    }

    .demo-alert-success {
        border-left-color: rgb(55,180,0);
        background: rgba(55,180,0, 0.1);
    }

    .demo-alert-info {
        border-left-color: rgb(83,146,228);
        background: rgba(83,146,228, 0.1);
    }

    .demo-alert-error {
        border-left-color: rgb(243, 23, 0);
        background: rgba(243, 23, 0, 0.1);
    }

    .demo-alert-warning {
        border-left-color: rgb(255, 192, 0);
        background: rgba(255, 192, 0, 0.1);
    }
</style>