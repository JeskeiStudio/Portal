@using Nethereum.UI
@using Radzen.Blazor;
@inject IEthereumHostProvider _metamaskHostProvider;
@inject NethereumSiweAuthenticatorService  _nethereumSiweAuthenticatorService;

<div>
    @if (MetamaskAvailable && !string.IsNullOrEmpty(SelectedAccount))
    {
        @SelectedAccount
    }

    @if (MetamaskAvailable && string.IsNullOrEmpty(SelectedAccount))
    {
        <RadzenButton ClassName="nav-item mx-1" Click=@EnableEthereumAsync >Connect with MetaMask</RadzenButton>
    }

    @if (!MetamaskAvailable)
    {
        <button class="btnMetamask" disabled>Please Install Metamask</button>
    }

</div>

@code {

    bool MetamaskAvailable { get; set; }
    string SelectedAccount { get; set; }
    protected string AuthenticatedAccount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
            MetamaskAvailable = await _metamaskHostProvider.CheckProviderAvailabilityAsync();

            StateHasChanged();
        }
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        this.StateHasChanged();
    }

    protected async Task EnableEthereumAsync()
    {
        SelectedAccount = await _metamaskHostProvider.EnableProviderAsync();
        this.StateHasChanged();
    }
}
